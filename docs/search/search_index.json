{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"APUNTES LARAVEL","text":""},{"location":"#rutas","title":"RUTAS","text":"<p>Las rutas se situan en Mi-PROYECTO-&gt;ROUTES-&gt;WEB</p> <pre><code>\u2514\u2500\u2500 routes\n      \u2514\u2500\u2500 web\n</code></pre> <p>Aqu\u00ed podemos ver la primera ruta.</p> <pre><code>Route::get('mundo', function () {\n    return 'Hello Clase 2 DAW';\n});\n</code></pre> <p>Le pasamos a la ruta un identificador que tendr\u00e1 un valor por defecto y esa ruta tendr\u00e1 un nombre dentro de la misma vista, asignamos valor por defecto</p> <pre><code>Route::get('/show/{id?}',function($id=\"122\"){\n\n  return $id;\n\n})-&gt;name('show');\n</code></pre> <p>Otra forma de ruta y utilizando un pattern n\u00famerico (s\u00f3lo pueden introducir n\u00fameros)</p> <pre><code>Route::get('/par-o-impar-{numero}',function($numero){\n     return $numero;\n\n    //return redirect()-&gt;to('/show/3'); -&gt; te redirije a la ruta que le indicas\n\n    //return redirect()-&gt;route('show') -&gt; te redirije a la ruta que tiene el nombre asignado en el name.\n\n    //return redirect()-&gt;route('show',['id' =&gt; '222']) -&gt; en caso de pasarle algun par\u00e1metro\n} )-&gt;where(['numero' =&gt; '[0-9]+']);\n\n// de esta forma a\u00f1adimos una expresi\u00f3n regular para que solo puedan introducir n\u00fameros\n</code></pre> <p> Restricciones con Expresiones Regulares </p> <pre><code>Route::get('user/{name}', function ($name) {\n//\n})-&gt;where('name', '[A-Za-z]+');   \n\n//nomes poden passar lletres min\u00edscules o Maj\u00fascules como m\u00ednim una volta\n</code></pre> <pre><code>Route::get('user/{id}', function ($id) {\n//\n})-&gt;where('id', '[0-9]+');\n\n//com a m\u00ednim, a soles podem passar com a m\u00ednim un nombre.\n</code></pre> <pre><code>Route::get('user/{id}/{name}', function ($id, $name) {\n//\n})-&gt;where(['id' =&gt; '[0-9]+', 'name' =&gt; '[a-z]+']);\n\n//le pasamos un array en caso de m\u00e1s de un elemento.\n</code></pre> <p>Ruta que nos lleva directamente a una vista e incluso pasarle un argumento.</p> <pre><code>Route::view (directo a la vista)\n\nRoute::view('/registro', 'registro');\n\n //en el caso que s\u00f3lo queramos enviar a una vista sin pasar por el controlador\n\nRoute::view('/welcome', 'clase', ['nombre' =&gt; 'Julio']);\n</code></pre> <p>Especificamos que podemos usar GET y POST para una ruta</p> <pre><code>//verbos HTTP m\u00faltiples\nRoute::match(['get', 'post'], '/', function () {\n//\n});\n\n\n//verbos HTTP cualquiera\nRoute::any('/', function () {\n//\n});\n</code></pre>"},{"location":"#controlador","title":"CONTROLADOR","text":"<p><code>php artisan make:controller PeliculasController</code></p> <p>Creamos un controlador vacio, App-&gt;http-&gt;Controller-&gt;</p> <pre><code>.\n\u2514\u2500\u2500 App\n    \u2514\u2500\u2500 http\n         \u2514\u2500\u2500 Controller\n</code></pre> <pre><code>//en route\n//a\u00f1adir la ruta en web.php arriba del todo.\n\nuse App\\Http\\Controllers\\PeliculasController;\n\n.............\n\nRoute::get('pelis', [PeliculasController::class, 'mostrar']);\n\n//en controlador\npublic function index(){\n   echo \"hola Julio\";\n}\n</code></pre>"},{"location":"#vista","title":"VISTA","text":"<p>Podemos aprovechar herencia en las vistas, por ello, vamos a crear.</p> <p>Tambi\u00e9n podemos crear una carpeta que contiene vistas \"men\u00fa\" y dentro las p\u00e1ginas, para acceder a ellos, habr\u00eda que poner \"menu.pagina\"</p> <p> Vista Padre PADRE.blade.php </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n    &lt;title&gt;\n        @yield('titulo')\n    &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;&lt;a href=\"#home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#news\"&gt;News&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#about\"&gt;About&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n@yield('contenido')\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p> Vista Layout Hija hija.blade.php </p> <pre><code>@extends('padre')\n\n@section('titulo','P\u00e1gina Heredada')\n\n@section('contenido')\n    &lt;h1&gt;P\u00e1gina Hija&lt;/h1&gt;\n@endsection\n</code></pre>"},{"location":"#sesiones-globales","title":"SESIONES GLOBALES","text":"<pre><code>session(['nombre'=&gt;'Julio']); //otra forma de crear variables sesi\u00f3n\n\n$nombre= session('nombre');  \n\nsession()-&gt;forget('nombre');  //Borra Julio\n\nsession()-&gt;flush();           //borra todo tipo de variables sesi\u00f3n, flash...\n\ndd(session()-&gt;all())         //muestra todas las variables de sesi\u00f3n\n\n/*mostrar variables sesi\u00f3n en blade VISTA*/\n\n{{session('julio')}}\n\n</code></pre> <p>https://laravel.com/docs/9.x/session#main-content</p>"},{"location":"#mensajes-flash","title":"MENSAJES FLASH","text":"<pre><code>//cuando en una p\u00e1gina queremos enviar un mensaje flahs podemos poner\n\nreturn back()-&gt;with('status','hemos recibido el mensaje'); //guardamos un mensaje flash\n\n//luego en la misma pagina (back) ponemos una condicion en blade si hay mensaje de sesion muestra sino formulario.\n @if(session('status'))\n   {{session('status')}}\n@else\n   formulario\n@endif\n\n//como vamos a repetir este codigo en muchos lados, podemos ponerlo en un fichero partial (resources-views-partial) y luego en el codigo lo sustituimos por @include en el editar.blade.php\n</code></pre>"},{"location":"#alert-sweet","title":"ALERT SWEET","text":"<p>https://sweetalert.js.org/guides/</p> <p> VISTA </p> <pre><code>&lt;script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"&gt;&lt;/script&gt;\n\n//ponerlo debajo del DOM en la vista\n&lt;script&gt;\n@if (session('success'))\nswal(\"Buen Trabajo!\", \"{{ session('success') }}\", \"success\");\n@endif\n&lt;/script&gt;\n</code></pre> <p> CONTROLADOR </p> <pre><code>//en el controlador \nreturn back()-&gt;with('success','Hemos recibido el mensaje');\n</code></pre>"},{"location":"#bases-de-datos-orm","title":"BASES DE DATOS - ORM","text":"<p>Si clicamos el comando php artisan nos dar\u00e1 un men\u00fa de todas las opciones disponibles. </p> <p>A nosotros nos interesa crear una base de datos empezaremos con una tabla, es recomendable primero crear la migracion que corresponde con la tabla en la base de datos articulos y a continuaci\u00f3n crearemos el modelo que corresponde con la entidad Articulo. </p> <p>Es preferible crearlo en ese orden, tambi\u00e9n hay que tener cuidado a la hora de crear la migraci\u00f3n en plural y la entidad en singular.</p> <p><code>php artisan make:migration create_articulos_table --create=\"articulos\"</code></p> <pre><code>//Tabla articulos\n Schema::create('articulos', function (Blueprint $table) {\n            $table-&gt;increments('id')-&gt;unsigned();\n            $table-&gt;text('titulo');\n            $table-&gt;mediumText('descripcion');\n            $table-&gt;timestamps();\n          });\n</code></pre> <p>IMPORTANTE -  TIPOS DE COLUMNAS!</p> <p>https://laravel.com/docs/9.x/migrations</p> <p>CUANDO DA ERROR EN LA MIGRACION NO ENCUENTRA DRIVERS</p> <p>https://alphaparticle.com/blog/solved-laravel-sail-could-not-find-driver-error/</p> <p>https://stackoverflow.com/questions/70923053/laravel-sail-could-not-find-driver-sql-show-full-tables-where-table-type-b</p> <p><code>php artisan make:model Articulo</code></p> <pre><code>//Modelo Articulo\nclass Articulo extends Model\n{\n    protected $table = 'articulos';  //hacemos referencia a la tabla art\u00edculos\n    protected $fillable = ['titulo', 'descripcion'];   \n       //fillable para proteger los campos que desea que permitan la actualizaci\u00f3n a la hora de insertar en la base de datos por asignaci\u00f3n masiva\n}\n</code></pre>"},{"location":"#seeder-semillas","title":"SEEDER (SEMILLAS)","text":"<p> SEEDER normal </p> <ol> <li> <p>Ejecutamos en terminal php artisan make:seeder NombreSeeder</p> </li> <li> <p>podemos ver que dentro de database-&gt;seeds se genera la nueva semilla e introducimos los siguientes datos.</p> </li> </ol> <pre><code>//a\u00f1adimos en la clase NombreSeeder\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Str;\n\n.....................\n\nfor ($i = 0; $i &lt; 10; $i++) {\n    DB::table('articulos')-&gt;insert([\n   'titulo' =&gt; Str::random(10),\n   'descripcion' =&gt; Str::random(10).'@gmail.com',\n   'created_at' =&gt; date('Y-m-d'),\n   'updated_at' =&gt; date('Y-m-d')]);\n}\n</code></pre> <ol> <li>luego en la clase DataBaseSeeder (otro fichero que ya est\u00e1 creado) activamos dentro de la clase </li> </ol> <p><code>$this-&gt;call([NombreSeeder::class]);</code></p> <pre><code>\npublic function run()\n{\n\n$this-&gt;call([\n        PeliculasSeeder::class,\n                   ]);\n}\n</code></pre> <ol> <li>Para generar los datos insertarmos en terminal</li> </ol> <p><code>./vendor/bin/sail php artisan db:seed</code></p> <p>https://laravel.com/docs/9.x/seeding#writing-seeders</p>"},{"location":"#consultar-datos","title":"CONSULTAR DATOS","text":""},{"location":"#constructor-de-consultas-query-builder","title":"CONSTRUCTOR DE CONSULTAS (Query Builder)","text":"<p>Cuando estamos usando conexiones m\u00faltiple</p> <pre><code>//a\u00f1adimos \nuse Illuminate\\Support\\Facades\\DB;\n....\n\n//obtenemos todos los usuarios\n$datos = DB::table('articulos')-&gt;get();\n\nforeach ($datos as $dato)\n{\n    echo $dato-&gt;descripcion;\n}\n\n//M\u00e1s ejemplos de consultas\n$dato = DB::table('articulos')-&gt;first();\n\n$dato = DB::table('articulos')-&gt;where('name', 'julio')-&gt;get();\n\n$dato = DB::table('articulos')-&gt;where('edad', '&gt;', 100)-&gt;get();\n\n$dato = DB::table('articulos')-&gt;where('estado', '&lt;&gt;', 'active')-&gt;get();\n\n$dato = DB::table('articulos')-&gt;where('name', 'like', 'J%')-&gt;get();\n\n\n//insertar\nDB::table('articulos')-&gt;insert(\n        ['titulo'=&gt;\"pepe\",'descripcion'=&gt;\"nuevadescripcion\"]\n    );\n\n//update\nDB::table('datos')\n              -&gt;where('id', 1)\n              -&gt;update(['nombre' =&gt; 'Estefania']);\n\n//delete\nDB::table('datos')-&gt;delete();\nDB::table('datos')-&gt;where('votes', '&gt;', 100)-&gt;delete();\n</code></pre> <p>https://laravel.com/docs/9.x/queries#running-database-queries</p>"},{"location":"#consultas-sql-nativas","title":"CONSULTAS SQL NATIVAS","text":"<pre><code>//seleccionar\n$results = DB::select('select * from articulos where id = :id', ['id' =&gt; 1]);\n\n//insertar en la Base users\nDB::insert('insert into articulos (titulo, descripcion) values (?, ?)', [1, 'Dayle']);\n\n//actualizar\n$affected = DB::update('update users set votes = 100 where name = ?', ['John']);\n\n//borrar\n$deleted = DB::delete('delete from users');\n\n//Ejecutando una instrucci\u00f3n general que no devuelve ning\u00fan valor\nDB::statement('drop table users');\n</code></pre>"},{"location":"#eloquent","title":"ELOQUENT","text":"<pre><code>$articulos=Articulo::all();  //$escritores=Escritor::get();\n\n$articulosOrdenados=Articulo::orderBy('descripcion','DESC')-&gt;get();\n\n$articulo= Articulo::findOrFail(1);\n\n$articulo= Articulo::where('edad', '&gt;', 100)-&gt;firstOrFail();\n\n$articulo= Articulo::whereEdad(100)-&gt;get();  //es m\u00e1s eficiente especificar las columnas Escritor::select('id','name')-&gt;whereEdad(100)-&gt;get()\n\n$ArticuloUlti=Articulo::latest('created_at')-&gt;get();   //muestra los \u00faltimos que se han a\u00f1adido\n\n\n//insertar Objeto en BD\n        $articulo = new Articulo();\n        $articulo-&gt;titulo = 'Mi libro Laravel';\n        $articulo-&gt;descripcion = 'Libro donde se habla de Laravel';\n        $articulo-&gt;save();\n\n//actualizar\n        $articulo = Articulo::find(1);  //$escritor = App/Escritor::find(1);\n        $articulo-&gt;titulo = 'Nuevo Laravel';     //$request-&gt;name;\n        $articulo-&gt;save();\n\n//borrar\n        $articulo= Articulo::find(1);\n        $articulo-&gt;delete();\n</code></pre> <ul> <li> <p><code>all()</code> devuelve todos los elementos de una tabla.</p> </li> <li> <p><code>find($id)</code> coge una id y devuelve un s\u00f3lo modelo. Si no existe un modelo coincidente, devuelve null.</p> </li> <li> <p><code>findOrFail($id)</code> toma una idy devuelve un s\u00f3lo modelo. Si no existe un modelo coincidente, arroja un error1 404.</p> </li> <li> <p><code>first()</code> devuelve el primer registro encontrado en la base de datos. Si no existe un modelo coincidente, devuelve null.</p> </li> <li> <p><code>firstOrFail()</code> devuelve el primer registro encontrado en la base de datos. Si no existe un modelo coincidente, arroja un error1 404.</p> </li> <li> <p><code>get()</code> devuelve una colecci\u00f3n de modelos que coinciden con la consulta.</p> </li> <li> <p><code>findOrCreate()</code> en el caso que no existe en la BD, lo crea.</p> </li> </ul> <pre><code>$dato=Articulo::firstOrCreate(['titulo'=&gt;'Principito','descripcion'=&gt;'Mi primer articulo']);\n</code></pre> <p>https://laravel-news.com/firstornew-firstorcreate-firstor-updateorcreate</p> <ul> <li> <p><code>toArray()</code> convierte el modelo / colecci\u00f3n en una matriz PHP simple.</p> </li> <li> <p><code>Pluck()</code> en caso de obtener una colecci\u00f3n y filtrar la parte que nos interesa.</p> </li> </ul> <pre><code>$users = User::all(); \n// Devuelve una colecci\u00f3n de usuarios, por ejemplo, ['name' =&gt; 'John', 'age' =&gt; 55],['name' =&gt; 'Melissa', 'age' =&gt; 18],['name' =&gt; 'Bob', 'age' =&gt; 43]\n\n$usernames = $users-&gt;pluck('name'); \n// tenemos una colecci\u00f3n de ['John', 'Melissa', 'Bob', 'Sara']\n</code></pre> <p> \u00bfC\u00faal forma es mejor o m\u00e1s \u00f3ptima? \u00bfSQL NATIVE o QUERY BUILDER o ELOQUENT?  </p> <p>https://www.laraveltip.com/que-es-mejor-eloquent-query-builder-o-sql/</p>"},{"location":"#paginar","title":"PAGINAR","text":"<p> en el CONTROLADOR de index </p> <pre><code>  $datos=Dato::latest()-&gt;paginate(3);\n</code></pre> <p> en la VISTA debajo de forelse </p> <pre><code>//en el momento que insertamos datos dentro de la tabla y queremos mostrar los datos de forma m\u00e1s humana.\n&lt;ul&gt;\n  @forelse ($datos as $item)\n\n    &lt;li&gt;  {{$item-&gt;title}}  {{$item-&gt;created_at-&gt;diffForHumans() }} \n     &lt;/li&gt;  \n\n  @empty\n     &lt;li&gt;NO HAY NADA &lt;/li&gt;\n  @endforelse\n&lt;/ul&gt;\n\n{{$datos-&gt;links()}}  //DEBAJO DEL FORELSE\n</code></pre> <p>\u00bfQu\u00e9 ocurre si vemos las flechas enormes?</p> <p>https://stackoverflow.com/questions/64002774/laravel-pagination-is-showing-weird-arrows</p>"},{"location":"#crud","title":"CRUD","text":"<p>Creas la tabla</p> <p><code>php artisan make:migration create_blogs_table --create=blogs</code></p> <p>Luego en la migraci\u00f3n creas los campos para la base de datos</p> <pre><code>Schema::create('blogs', function (Blueprint $table) {\n$table-&gt;bigIncrements('id');\n$table-&gt;string('blog_title');\n$table-&gt;text('blog_content');\n$table-&gt;timestamps();\n});\n</code></pre> <p>Para generar las rutas podemos hacer dos cosas:</p> <ol> <li>Generarlas autom\u00e1ticamente con el nombre de las rutas en ingl\u00e9s.</li> </ol> <p>Generas las rutas insertando el fichero Web</p> <pre><code>use App\\Http\\Controllers\\PhotoController;\n..............\nRoute::resource('photos', PhotoController::class);\n</code></pre> <p>Para listar las rutas, en terminal  <code>php artisan route:list -v</code></p> <p> Creamos Controlador  </p> <p><code>php artisan make:controller photoController --resource</code></p> <p>1.index()</p> <p>2.create()</p> <p>3.store()</p> <p>4.show()</p> <p>5.edit()</p> <p>6.update()</p> <p>7.destroy()</p> <ol> <li>Dise\u00f1ar nuestras rutas y controlador en castellano uno a uno</li> </ol> <pre><code>//Dise\u00f1amos nuestras rutas en Web\nuse App\\Http\\Controllers\\DatosController;\n\n..............\n\nRoute::get('/index', [DatosController::class, 'index'])-&gt;name('index');\nRoute::post('/almacenar', [DatosController::class, 'almacenar'])-&gt;name('almacenar');\nRoute::get('/editar/{id}', [DatosController::class,'editar'])-&gt;name('editar');\nRoute::patch('/actualizar/{id}', [DatosController::class,'actualizar'])-&gt;name('actualizar');\nRoute::delete('/borrar/{id}', [DatosController::class,'borrar'])-&gt;name('borrar');\nRoute::view('/insertar','insertar')-&gt;name('insertar');\n</code></pre> <p>Dise\u00f1amos la migraci\u00f3n y el modelo, en caso de necesitarlo</p> <p><code>php artisan make:migration create_datos_table --create=datos</code></p> <p>Creamos la migracion que es la tabla en la base de datos \"datos\"</p> <pre><code>Schema::create('datos', function (Blueprint $table) {\n            $table-&gt;bigIncrements('id');\n            $table-&gt;string('nombre');\n            $table-&gt;text('descripcion');\n            $table-&gt;timestamps();\n        });\n</code></pre> <p>Creamos el modelo \"Dato\" que es la Entidad que vamos a trabajar y dentro ponemos los datos que queremos proteger.</p> <p><code>php artisan make:model Dato</code></p> <pre><code>protected $table= 'datos';\nprotected $fillable = ['nombre', 'descripcion']; //\u00bfQu\u00e9 atributos deber\u00edas incluir en dicho array?\n\n//Aquellos que consideres sensibles y que no deber\u00edan modificarse o asignarse en cierta forma, el m\u00e1s t\u00edpico es el id, el cual normalmente no se modifica ni se asigna de forma manual.\n}\n</code></pre>"},{"location":"#index-mostrar-datos","title":"INDEX-MOSTRAR DATOS","text":"<p> en el CONTROLADOR </p> <pre><code> public function index(){\n\n    $datos=Dato::all();\n\n    return view('index',['datos'=&gt;$datos]);  //view('index',compact('datos');\n   } \n</code></pre> <p> en la VISTA </p> <pre><code>\n@forelse ($datos as $item)\n&lt;li&gt; \n{{$item-&gt;nombre}} {{$item-&gt;descripcion}} \n     &lt;a href=\"{{ route('editar', $item-&gt;id)}}\" &gt;Edit&lt;/a&gt; &lt;!--a\u00f1adimos tambi\u00e9n EDITAR--&gt;\n     &lt;form action=\"{{ route('borrar', $item-&gt;id)}}\" method=\"post\"&gt; &lt;!--a\u00f1adimos tambi\u00e9n BORRAR--&gt;\n        @csrf\n        @method('DELETE')\n        &lt;button type=\"submit\"&gt;borrar&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/li&gt;\n@empty\n   &lt;li&gt;NO HAY NADA &lt;/li&gt;\n@endforelse\n</code></pre>"},{"location":"#insertar-store","title":"INSERTAR -STORE","text":"<p> En el CONTROLADOR </p> <pre><code> public function almacenar(Request $request){\n\n//LA MEJOR FORMA DE INSERTAR DATOS ya que se hace la comprobaci\u00f3n de los campos obligatorios para que no hagan inyeccion y luego inserta.\n    $datos=request()-&gt;validate([\n        'nombre'=&gt;'required|max:25', \n        'descripcion'=&gt;'required']\n    );\n\n    Dato::create($datos);\n\n    return redirect()-&gt;route('index');\n    //return back(); //te redirecciona a la misma p\u00e1gina\n   } \n</code></pre> <p> En la VISTA </p> <pre><code>@if ($errors-&gt;any())  //esto muestra todos los errores seguidos\n    &lt;ul&gt;\n        @foreach ($errors-&gt;all() as $error)\n        &lt;li&gt;{{ $error }}&lt;/li&gt;\n        @endforeach\n    &lt;/ul&gt;\n&lt;br/&gt;\n@endif\n\n&lt;form method=\"post\" action=\"{{ route('almacenar') }}\"&gt; \n\n        @csrf\n        &lt;label for=\"name\"&gt;Nombre:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"nombre\" value=\"{{old('nombre')}}\"/&gt;  \n        &lt;!--ponemos old porque en el caso que carguemos el formulario y diera error habr\u00eda que volver a introducir todos los campos, as\u00ed recuerda o guarda los campos que est\u00e1n bien--&gt;\n     {!! $errors-&gt;first('name', '&lt;small&gt;:message&lt;/small&gt;&lt;br&gt;' )!!}  &lt;!-- as\u00ed especificamos los errores debajo--&gt;\n\n        &lt;label for=\"price\"&gt;Descripcion:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"descripcion\" value=\"{{old('descripcion')}}\"/&gt;\n     {!! $errors-&gt;first('descripcion', '&lt;small&gt;:message&lt;/small&gt;&lt;br&gt;' )!!}  \n\n\n    &lt;button type=\"submit\"&gt;Crear&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"#editar","title":"EDITAR","text":"<p> EN EL CONTROLADOR </p> <pre><code>public function editar($id){\n\n    $dato = Dato::findOrFail($id);  //como no est\u00e1 el dato si nos equivocamos de id nos muestra la p\u00e1gina de error 404, podemos crear uno personalizado en la view-&gt;errors-&gt;404.blade.php , creamos carpeta \"errors\"\n    return view('editar', compact('dato'));\n   } \n</code></pre> <p> EN LA VISTA para EDITAR </p> <pre><code>@if ($errors-&gt;any())\n        &lt;div class=\"alert alert-danger\"&gt;\n            &lt;strong&gt;Whoops!&lt;/strong&gt; There were some problems with your input.&lt;br&gt;&lt;br&gt;\n            &lt;ul&gt;\n                @foreach ($errors-&gt;all() as $error)\n                    &lt;li&gt;{{ $error }}&lt;/li&gt;\n                @endforeach\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    @endif\n\n&lt;form method=\"post\" action=\"{{ route('actualizar', $dato) }}\"&gt;  \n//No es necesario especificar el Id ya que la nueva versi\u00f3n laravel ya busca dentro del Objeto\n          &lt;div&gt; \n              @method('PATCH')\n              @csrf\n\n              &lt;label for=\"name\"&gt;nombre:&lt;/label&gt;\n              &lt;input type=\"text\"  name=\"nombre\" value=\"{{ $dato-&gt;nombre }}\"/&gt;\n          &lt;/div&gt;\n          &lt;div &gt;\n              &lt;label for=\"descripcion\"&gt;descripcion&lt;/label&gt;\n              &lt;input type=\"text\"  name=\"descripcion\" value=\"{{ $dato-&gt;descripcion }}\"/&gt;\n          &lt;/div&gt;\n\n          &lt;button type=\"submit\" &gt;Actualizar&lt;/button&gt;\n      &lt;/form&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>  En el CONTROLADOR para ALMACENAR DATOS ya MODIFICADOS </p> <pre><code>public function actualizar(Request $request)\n    {\n        $validacion = $request-&gt;validate([\n            'nombre' =&gt; 'required|min:1|max:10',\n            'descripcion' =&gt; 'required',\n        ]);\n\n        Dato::whereId($request-&gt;id)-&gt;update($validacion); //otra opci\u00f3n\n\n        /*  //otra forma de almacenar\n         $datos = Dato::find($id);   //podremos utilizar findOrFail($id) para que en caso de no encontrar no falle\n         $datos-&gt;nombre = $validacion['nombre'];\n         $datos-&gt;descripcion = $validacion['descripcion'];\n         $datos-&gt;update();*/\n\n        return redirect()-&gt;route('index');\n}\n\n// formar de recuperar datos de un formulario. $request-&gt;get('nombre'); $request-&gt;nombre;  $request-&gt;input('nombre');\n</code></pre>"},{"location":"#borrar","title":"BORRAR","text":"<p> En el controlador Borrar </p> <pre><code>    public function borrar($id){\n\n        $dato = Dato::findOrFail($id);\n        $dato-&gt;delete();\n        return redirect()-&gt;route('index');\n       } \n</code></pre>"},{"location":"#relacion-uno-a-uno-1x1","title":"RELACI\u00d3N UNO A UNO (1X1)","text":"<p>Crearemos la tabla Usuario y Tel\u00e9fono. El modelo de User puede estar asociado con un modelo de tel\u00e9fono. Para definir esta relaci\u00f3n, colocaremos un m\u00e9todo de phone en el modelo User. El m\u00e9todo de phone debe llamar al m\u00e9todo hasOne y devolver su resultado.</p> <pre><code>//tabla users \nSchema::create('users', function (Blueprint $table) {\n\n $table-&gt;increments('id');\n\n $table-&gt;string('name');\n\n $table-&gt;string('email')-&gt;unique();\n\n $table-&gt;timestamps();\n\n });\n\n</code></pre> <pre><code>\n//Crear Tabla de Migraci\u00f3n de Tel\u00e9fonos con Clave For\u00e1nea\nSchema::create('phones', function (Blueprint $table) {\n\n $table-&gt;increments('id');\n\n $table-&gt;integer('user_id')-&gt;unsigned();\n\n $table-&gt;string('phone_no');\n\n $table-&gt;timestamps();\n\n $table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users')-&gt;onDelete('cascade'); \n\n});\n\n</code></pre> <p>  Modelo de usuario: </p> <pre><code>\n namespace App\\Models;\n\n use Illuminate\\Database\\Eloquent\\Model;\n\n class User extends Model \n{\n /**\n * Get the phone associated with the user.\n */\n public function phone()\n {\n return $this-&gt;hasOne(Phone::class);\n } \n}\n\n</code></pre> <p> Modelo de tel\u00e9fono </p> <p>Podemos acceder al modelo de Phone desde nuestro modelo de User. A continuaci\u00f3n, definamos una relaci\u00f3n en el modelo Phone que nos permitir\u00e1 acceder al usuario propietario del tel\u00e9fono. Podemos definir el inverso de una relaci\u00f3n hasOne usando el m\u00e9todo belongsTo.</p> <pre><code>\nnamespace App\\Models; \n\nuse Illuminate\\Database\\Eloquent\\Model; \n\nclass Phone extends Model \n{\n /**\n * Get the user that owns the phone.\n */\n public function user()\n {\n return $this-&gt;belongsTo(User::class);\n //return $this-&gt;belongsTo(User::class, 'foreign_key');   \n//Si la clave externa en el modelo de Phone no es user_id, puede pasar un nombre de clave personalizado\n } \n}\n\n</code></pre> <p> Recuperar registros usando el modelo: </p> <p>Una vez que se define la relaci\u00f3n, podemos recuperar el registro relacionado usando las propiedades din\u00e1micas de Eloquent. Entonces, aqu\u00ed podemos usar el modelo de usuario con funci\u00f3n de tel\u00e9fono.</p> <pre><code>\n$phone = User::find(1)-&gt;phone;\n\n$user = Phone::find(1)-&gt;user;\n\n</code></pre> <p>  Crear registros usando el modelo </p> <pre><code>$user = User::find(1);\n$phone = new Phone; \n$phone-&gt;phone_no = '9876543210';\n$user-&gt;phone()-&gt;save($phone);\n</code></pre> <pre><code>$phone = Phone::find(1);\n$user = User::find(1);\n$phone-&gt;user()-&gt;associate($user)-&gt;save();\n</code></pre>"},{"location":"#relacion-uno-a-muchos-1xm","title":"RELACI\u00d3N UNO A MUCHOS (1XM)","text":"<p>Una categoria tiene muchos art\u00edculos. Creamos primero las migraciones (bases datos) y luego el modelo (Entidades), tambi\u00e9n tenemos la opci\u00f3n de crear el modelo y luego automaticamente las migraciones pero hay que tener cuidado ya que genera el nombre de las tablas de la migraci\u00f3n en ingl\u00e9s.</p> <p><code>php artisan make:migration create_categorias_table --create=\"categorias\"</code></p> <p><code>php artisan make:migration create_articulos_table --create=\"articulos\"</code></p> <p> Tablas migraciones </p> <pre><code>//tabla Categories\n  Schema::create('categorias', function (Blueprint $table) {\n            $table-&gt;increments('id')-&gt;unsigned();\n            $table-&gt;text('nombre');\n            $table-&gt;mediumText('masInfo');\n            $table-&gt;timestamps();\n        });\n\n//tabla articulos\n\n    Schema::create('articulos', function (Blueprint $table) {\n            $table-&gt;increments('id')-&gt;unsigned();\n            $table-&gt;integer('categoria_id')-&gt;unsigned();  //si hubieramos puesto categorias_id tambien hubiera cogido la relaci\u00f3n\n            $table-&gt;text('titulo');\n            $table-&gt;mediumText('descripcion');\n            $table-&gt;timestamps();\n            //relaciones\n            $table-&gt;foreign('categoria_id')-&gt;references('id')-&gt;on('categorias')-&gt;onDelete('cascade')-&gt;onUpdate('cascade');\n            //category_id hace referencia a la tabla categories y el borrado y la actualizaci\u00f3n es en cascada.\n        });\n</code></pre> <p> Creamos los modelos </p> <p><code>php artisan make:model Categoria</code></p> <pre><code>//Modelo Categoria\nclass Categoria extends Model\n{\n    protected $table = 'categorias';\n\n    //protected $primaryKey = 'categoria_id';  \n    //Por defecto id es la clave primaria, podemos definir un campo diferente con la propiedad primaryKey\n\n    //public $timestamps = true;  \n    //especificamos si queremos crear created_at y updated_at en la base de datos\n    protected $fillable = ['nombre', 'masInfo'];\n\n    public function articulos()\n    {\n        return $this-&gt;hasMany('App\\Models\\Articulo');\n    }\n}\n\n\n//Modelo Art\u00edculos\n\nclass Articulo extends Model\n{\n    protected $table = 'articulos';\n    protected $fillable = ['titulo', 'descripcion'];\n\n    public function categoria()\n    {\n        return $this-&gt;belongsTo('App\\Models\\Categoria');\n    }\n}\n</code></pre> <p> En el controlador </p> <pre><code>public function insertar()\n    {\n        $categoria = Categoria::find(3);   //buscamos que ya tenemos almacenada o la creamos.\n\n        $articulo = new Articulo(['titulo' =&gt; 'Pedazo Art\u00edculo', 'descripcion' =&gt; 'toda la descripci\u00f3n']);  //creamos art\u00edculo.\n        $categoria-&gt;articulos()-&gt;save($articulo);  //guardamos dentro de categoria un art\u00edculo.\n\n       //en caso que tengamos varios art\u00edculos\n       /* $categoria-&gt;articulos()-&gt;saveMany([\n            new Articulo(['titulo' =&gt; 'A new comment.', 'descripcion' =&gt; 'hola']),\n            new Articulo(['titulo' =&gt; 'Another comment.',  'descripcion' =&gt; 'hola']),\n        ]);*/\n\n    }\n</code></pre> <p>http://documentacion-laravel.com/eloquent-relationships.html#insertando-y-actualizando-modelos-relacionados</p> <p> PROBLEMA N+1 - LAZY LOADING </p> <p>Muestra el nombre de todas las categorias de todos los art\u00edculos. Una consulta para obtener todos los art\u00edculos en la tabla, despu\u00e9s otra consulta para cada articulos para obtener quien es el autor</p> <pre><code> $articulos = Articulo::all();\n\n foreach ($articulos as $articulo) {\n     dump($articulo-&gt;categoria-&gt;nombre);\n   }\n</code></pre> <p>  SOLUCI\u00d3N - EAGER LOADING  </p> <p>Al usar la carga previa o carga impaciente (Eager Loading) para reducir esta operaci\u00f3n a solo 2 consultas</p> <pre><code>$articulos = Articulo::with('categoria')-&gt;get();\n\n foreach ($articulos as $articulo) {\n           echo $articulo-&gt;categoria-&gt;nombre .\"&lt;/br&gt;\";\n        }\n</code></pre> <p>https://styde.net/lazy-loading-vs-eager-loading/</p> <p> BORRADO </p> <p>Borra la categoria 9 y todos los articulos relacionados (cascada)</p> <pre><code>$Categoria = Categoria::find(9);\n$Categoria-&gt;delete();\n\n//borra art\u00edculo\n$articulo = Articulo::find(2);        \n$articulo-&gt;delete();\n</code></pre>"},{"location":"#relacion-de-muchos-a-muchos-nxm","title":"RELACION DE MUCHOS A MUCHOS (NXM)","text":"<p>Un post puede tener muchas Etiquetas y una etiqueta puede tener muchos Posts, por tanto habr\u00e1 que crear una tabla auxiliar.</p> <p><code>php artisan make:migration create_etiquetas_table --create=\"etiquetas\"</code></p> <p><code>php artisan make:migration create_posts_table --create=\"posts\"</code></p> <p><code>php artisan make:migration create_etiqueta_post_table --create=\"etiqueta_post\"</code></p> <p>Dentro de la tabla de migraciones</p> <p> ETIQUETAS </p> <pre><code>Schema::create('etiquetas', function (Blueprint $table) {\n            $table-&gt;increments('id');\n\n            $table-&gt;string('nombre',128);\n            $table-&gt;string('slug',128);\n\n            $table-&gt;timestamps();\n        });\n</code></pre> <p> POSTS </p> <pre><code>   Schema::create('posts', function (Blueprint $table) {\n            $table-&gt;increments('id');\n\n             $table-&gt;string('nombre',128)-&gt;unique();\n             $table-&gt;string('slug',128);\n             $table-&gt;text('cuerpo');\n             $table-&gt;enum('status',['PUBLISHED','DRAFT'])-&gt;default('DRAFT');\n             $table-&gt;string('file', 128)-&gt;nullable();\n\n             $table-&gt;timestamps();\n\n        });\n</code></pre> <p> ETIQUETA_POST </p> <pre><code> Schema::create('etiqueta_post', function (Blueprint $table) {\n            $table-&gt;increments('id');\n\n            $table-&gt;integer('post_id')-&gt;unsigned();\n            $table-&gt;integer('etiqueta_id')-&gt;unsigned();\n\n            $table-&gt;timestamps();\n\n             //relaciones\n             $table-&gt;foreign('post_id')-&gt;references('id')-&gt;on('posts')-&gt;onDelete('cascade')-&gt;onUpdate('cascade');\n             $table-&gt;foreign('etiqueta_id')-&gt;references('id')-&gt;on('etiquetas')-&gt;onDelete('cascade')-&gt;onUpdate('cascade');\n        });\n</code></pre> <p>Dentro de los modelos</p> <pre><code>//Modelo POST\nclass Post extends Model\n{\n    protected $table = 'posts';\n    //protected $primary_key = 'categoria_id';\n    protected $fillable = ['nombre', 'slug', 'cuerpo', 'status' ,'file'];\n\n    public function etiquetas()\n    {\n        return $this-&gt;belongsToMany('App\\Models\\Etiqueta');\n    }\n}\n\n//Modelo ETIQUETA\n\nclass Etiqueta extends Model\n{\n    protected $table = 'etiquetas';\n    //protected $primary_key = 'categoria_id';\n    protected $fillable = ['nombre', 'slug'];\n\n    public function posts()\n    {\n        return $this-&gt;belongsToMany('App\\Models\\Post');\n    }\n}\n\n//INSERTAR Tabla intermedia\n\npublic function insertarTablaIntermedia(){\n        $etiqueta=Etiqueta::find(1);\n        $post = Post::find(2);\n        $post-&gt;etiquetas()-&gt;attach($etiqueta);\n       }\n</code></pre> <p> OBTENER DATOS DE LA otra TABLA RELACIONADA. </p> <pre><code>return Post::find(1)-&gt;etiquetas()-&gt;get();  \n//del Post(1) obtiene todas las etiquetas relacionadas\n\nreturn Post::find(1)-&gt;etiquetas()-&gt;where('nombre','futbol')-&gt;get();  \n//del Post(1) obtiene la etiqueta relacionada que tiene nombre = \"futbol\"\n\n</code></pre> <p> CONSULTAS EN MULTIPLES TABLAS </p> <p>Ejemplo:</p> <p>Tablas: a, b, c, d, e, f Quiero traer los datos de todas las tablas relacionadas, los datos de a, b, c, d,e,f. A est\u00e1 relacionado con B (1,n) B con C (1,n) C con D (1,n) D con E (1,n) E con F (1,n) Soluci\u00f3n:</p> <p>https://es.stackoverflow.com/questions/173727/consultas-en-m%C3%BAltiples-tablas-con-laravel-5-5</p>"},{"location":"#autentificacion-login-registro","title":"AUTENTIFICACI\u00d3N (LOGIN - REGISTRO)","text":"<p>https://github.com/laravel/ui</p> <ol> <li>Primero Instalamos (copiamos las rutas de web ya que se borran )</li> </ol> <p><code>./vendor/bin/sail composer require laravel/ui</code></p> <ol> <li> <p><code>php artisan ui bootstrap --auth</code></p> </li> <li> <p><code>npm install</code></p> </li> <li> <p><code>npm run dev</code></p> </li> <li> <p>Despu\u00e9s si accedemos dentro routes-&gt;Web podemos ver que se ha creado <code>Auth::routes()</code>;</p> </li> <li> <p>Para cambiar la redirecci\u00f3n despu\u00e9s de Logearnos, tendremos que ir dentro app-&gt;http-&gt;Controller-&gt;Auth cambiamos las rutas de register y login cambiando ruta a /</p> </li> <li> <p>Quitamos la ruta /home dentro de las rutas en web</p> </li> </ol> <p> MUESTRA USUARIO BLADE </p> <pre><code>@auth    &lt;!--sirve para mostrar en caso de estar autentificado, estar logeado--&gt;\n{{auth()-&gt;user()-&gt;name}}\n@endauth\n\n&lt;!--tambien cambiar la ruta de middleware en caso de estar autentificado y \nvolver hacer login peta y te manda a home por tanto cambiar a raiz.--&gt;\n\n@if(auth()) &lt;!--si el usuario est\u00e1 autentificado--&gt;\n\n@endif\n</code></pre> <p> SABER SI EST\u00c1 LOGEADO EN EL CONTROLADOR </p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\nif(Auth::check()){ \n return \"estas logeado\";\n}else { \n return \"no estas logeado\";\n} \n\n// Obtiene el objeto del Usuario Autenticado\n$user = Auth::user();\n$user-&gt;name;\n</code></pre> <p> SECURIZAR </p> <p>Tambi\u00e9n podemos indicarlo directamente en el constructor de un controlador </p> <pre><code>public function __construct()\n{\n$this-&gt;middleware('auth');\n}\n</code></pre> <p>Otra forma es indic\u00e1ndolo en la ruta para protegerla </p> <pre><code>Route::get('/resultado', 'PruebasController@ejemplo')-&gt;middleware('auth);\n</code></pre> <p> LOGOUT </p> <pre><code>@guest \n&lt;a href=\"{{route('login')}}\"&gt;Login&lt;/a&gt;\n@else   \n&lt;a href=\"{{ route('logout') }}\" onclick=\"event.preventDefault(); document.getElementById('logout-form').submit();\"&gt; Logout &lt;/a&gt;\n\n  &lt;form id=\"logout-form\" action=\"{{ route('logout') }}\" method=\"POST\" style=\"display: none;\"&gt;\n     @csrf\n  &lt;/form&gt;\n@endguest\n</code></pre> <p> DESHABILITAR REGISTRO </p> <p>vamos a Web y modificamos ruta</p> <pre><code>Auth::routes(['register'=&gt;false]);\n</code></pre> <p>  BLOQUEAR USUARIO, INTENTOS FALLIDOS </p> <p>En el caso que querramos bloquear al usuario por intentos de ingresos fallidos y penalizar el tiempo a la hora de volver autenficarte, bastar\u00e1 con a\u00f1adir el controlador por defecto  app-&gt;http-&gt;Controller-&gt;auth-&gt; LoginController</p> <pre><code>class LoginController extends Controller\n{\n\n    use AuthenticatesUsers;\n\n    public $maxAttempts = 2;   //n\u00famero m\u00e1ximo de intentos\n    public $decayMinutes = 2;  //tiempo que durar\u00e1 el bloqueo\n</code></pre>"},{"location":"#try-catch","title":"TRY ... CATCH","text":"<p> Las Rutas </p> <pre><code>Route::get('/formularioBusqueda', [PeliculasController::class, formulario'])-&gt;name('formularioBusqueda');   \nRoute::post('/product/resultado', [ProductController:class, 'resultado'])-&gt;name('resultadoBusqueda');\n</code></pre> <p> En la vista 'formularioBusqueda' </p> <pre><code>\n@if (session('error'))\n&lt;div&gt;{{ session('error') }}&lt;/div&gt;   &lt;!--En caso de no encontrar el producto en la BBDD muestra error--&gt;\n@endif\n\n&lt;form action=\"{{ route('resultadoBusqueda') }}\" method=\"POST\"&gt;\n@csrf\n\n&lt;input id=\"title name=\"title\" type=\"text\" value=\"{{ old('product') }}\" placeholder=\"Product Title\"&gt;\n\n&lt;input type=\"submit\" value=\"Search\"&gt;\n&lt;/form&gt;\n</code></pre> <p>  En el controlador </p> <pre><code>\npublic function resultado(Request $request)\n{\n    try {\n        $product = Product::where('title',$request-&gt;get('title'));  //busca el producto en la BBDD\n    } catch (ModelNotFoundException $exception) {\n        return back()-&gt;withError($exception-&gt;getMessage())-&gt;withInput();   //en caso de no encontrar en la BBDD captura la excepci\u00f3n y envia la info a la misma vista \n        //return $exception-&gt;getMessage();\n\n    }\n    return view('resultadoBusqueda', compact('product'));   //en caso de encontrar el producto manda otra vista el resultado\n}\n</code></pre>"},{"location":"comandos/","title":"COMANDOS","text":""},{"location":"comandos/#crear-proyectos","title":"CREAR PROYECTOS","text":"<p><code>curl -s \"https://laravel.build/mi-proyecto\" | bash</code></p>"},{"location":"comandos/#arrancar-sail","title":"ARRANCAR SAIL","text":"<p><code>./vendor/bin/sail up -d</code></p>"},{"location":"comandos/#controlador","title":"CONTROLADOR","text":"<ul> <li>A\u00f1adir CONTROLADOR vacio</li> </ul> <p><code>php artisan make:controller PeliculasController</code></p> <ul> <li>Crea el modelo Trainer y adem\u00e1s hace la migracion</li> </ul> <p><code>php artisan make:model Trainer -m</code></p> <ul> <li>modelo migracion controlador</li> </ul> <p><code>php artisan make:model Tarea -mcr</code> </p>"},{"location":"comandos/#modelo","title":"MODELO","text":"<p><code>php artisan make:model Categoria</code></p>"},{"location":"comandos/#migraciones","title":"MIGRACIONES","text":"<ul> <li>Creamos la migraci\u00f3n (la tabla en la base de datos es en plural y el modelo en singular)</li> </ul> <p><code>php artisan make:migration create_categorias_table --create=\"categorias\"</code></p> <ul> <li>Editar tabla (podemos crear otra migraci\u00f3n con otro atributo)</li> </ul> <p><code>php artisan make:migration anadir_telefono_tabla_cate --table=\"categorias\"</code></p> <ul> <li>Deshacer la \u00faltima migraci\u00f3n ejecutada y registrada en la base de datos.</li> </ul> <p><code>php artisan migrate:rollback</code></p> <ul> <li>Borra la base de datos y la carga de nuevo. <code>php artisan migrate:fresh</code> </li> </ul>"},{"location":"comandos/#rutas","title":"RUTAS","text":"<ul> <li>Genera todas las rutas get,put,post de un crud... Route::resource() </li> </ul> <p><code>php artisan routes</code> </p> <ul> <li>Para listar las rutas, en terminal</li> </ul> <p><code>php artisan route:list -v</code> </p>"},{"location":"instalacion/","title":"INSTALACI\u00d3N LARAVEL","text":"<p>1.Para instalar nuestro proyecto de Laravel tendremos que  situarnos en nuestro escritorio e introducir el siguiente comando.</p> <p><code>curl -s \"https://laravel.build/mi-proyecto\" | bash</code></p> <p>2.Despu\u00e9s entramos dentro de esa carpeta.</p> <p><code>cd mi-proyecto</code></p> <p>3.para ARRANCAR SAIL haremos</p> <p><code>./vendor/bin/sail up -d</code></p> <p>CUIDADOO!</p> <p>Tenemos que asegurarnos que otros contenedores de dockers est\u00e9n parados.</p> <p>https://desarrolloweb.com/articulos/laravel-sail</p> <p>https://www.laraveltip.com/como-utilizar-laravel-con-docker-la-guia-definitiva/</p>"},{"location":"instalacion/#como-podemos-anadir-nuestro-phpmyadmin-o-adminer","title":"\u00bfC\u00f3mo podemos a\u00f1adir nuestro PHPMYADMIN o ADMINER?","text":"<p>Tenemos que a\u00f1adir en nuestro fichero docker-compose.yml y m\u00e1s abajo, en el \u00faltimo servicio a\u00f1adir</p> <p>Para poder acceder debemos poner localhost:8080</p>"},{"location":"instalacion/#cual-son-nuestras-contrasenas-y-usuarios-de-acceso","title":"\u00bfC\u00faal son nuestras contrase\u00f1as y usuarios de acceso?","text":"<p>En el fichero .env de nuestro proyecto tendremos todas las variables de sesi\u00f3n, es importante que no subamos este fichero en el github por seguridad.</p> <p>https://ecwebservices.medium.com/adding-phpmyadmin-to-laravel-sail-64823687e084</p> <p>https://ecwebservices.medium.com/adding-adminer-to-laravel-sail-727c80835106</p>"},{"location":"paquetes/","title":"PAQUETES LARAVEL","text":"<p>https://github.com/LaravelDaily/Best-Laravel-Packages</p>"},{"location":"paquetes/#traduccion","title":"Traducci\u00f3n","text":"<p>https://github.com/Laraveles/spanish</p>"},{"location":"paquetes/#debugbar","title":"DEBUGBAR","text":"<p><code>composer require barryvdh/laravel-debugbar --dev</code></p> <p>Dentro de config-&gt;App a\u00f1adimos en provider</p> <p><code>Barryvdh\\Debugbar\\ServiceProvider::class,</code></p> <p>En aliases</p> <p><code>'Debugbar' =&gt; Barryvdh\\Debugbar\\Facade::class,</code></p>"},{"location":"paquetes/#crear-modelos-eloquent-desde-la-base-datos","title":"CREAR MODELOS ELOQUENT desde la BASE DATOS","text":"<p>Introducimos el comando de instalaci\u00f3n del paquete</p> <p><code>composer require reliese/laravel --dev</code></p> <p>Registrar el provider en app/Providers/AppServiceProvider.php</p> <p><code>public function register() {     if ($this-&gt;app-&gt;environment() == 'local') {         $this-&gt;app-&gt;register(\\Reliese\\Coders\\CodersServiceProvider::class);     } }</code></p> <p>Publicas el fichero de configuraci\u00f3n:</p> <p><code>php artisan vendor:publish --tag=reliese-models</code></p> <p>Comandos: </p> <p>Crea todos los MODELOS de las tablas de la BD  <code>php artisan code:models</code></p> <p>Crea un MODELO de una tabla <code>php artisan code:models --table=users</code></p> <p>https://cristianllanos.medium.com/eloquent-models-from-my-database-5d74c632e03c#.qg7cd4vri https://github.com/reliese/laravel</p>"},{"location":"paquetes/#generar-crud-automaticamente","title":"GENERAR CRUD AUTOM\u00c1TICAMENTE","text":"<p>https://github.com/awais-vteams/laravel-crud-generator</p> <p>https://diarioprogramador.com/crear-crud-en-laravel-con-generador-de-cruds/</p> <p>https://github.com/appzcoder/crud-generator</p>"},{"location":"paquetes/#generar-pdf","title":"GENERAR PDF","text":"<p>Instalamos libreria</p> <p><code>composer require barryvdh/laravel-dompdf</code></p> <p>a\u00f1adimos la siguiente ruta en config/app.php en el array 'provider'</p> <p><code>Barryvdh\\DomPDF\\ServiceProvider::class,</code></p> <p>luego a\u00f1adimos la siguiente ruta en config/app.php en el array 'aliases'</p> <p><code>'PDF' =&gt; Barryvdh\\DomPDF\\Facade::class,</code></p> <p>crearmos ruta en Web</p> <p><code>Route::get('/imprimir', 'RelacionController@imprimir')-&gt;name('imprimir');</code></p> <p>y una vista llamada 'imprimir.blade.php' con c\u00f3digo en html</p> <pre><code>&lt;body&gt;\n        &lt;h1&gt;P\u00e1gina de prueba&lt;/h1&gt;\n\n&lt;/body&gt;\n</code></pre> <p>en el controlador </p> <pre><code>use PDF;\n......\n\npublic function imprimir(){\n     $pdf = PDF::loadView('imprimir');\n     return $pdf-&gt;download('ejemplo.pdf');\n}\n</code></pre> <p>https://www.nigmacode.com/laravel/Generar-pdf-Dompdf-Laravel</p>"},{"location":"paquetes/#descargar-ficheros-zip","title":"DESCARGAR FICHEROS .ZIP","text":"<p><code>composer require chumper/zipper</code></p> <p>dentro de config/app.php en providers</p> <p><code>Chumper\\Zipper\\ZipperServiceProvider::class,</code></p> <p>en aliases</p> <p><code>'Zipper' =&gt; Chumper\\Zipper\\Zipper::class,</code></p> <p> Controlador </p> <pre><code>use Zipper;\n\nclass Controller extends BaseController\n{\n\n\n    public function comprimirDescargar()\n    {\n        /*A\u00f1adimos la ruta donde se encuentran los archivos que queramos comprimir,\n          en este ejemplo comprimimos todos los que se encuentran en la carpeta \n          storage/app/public*/\n        $files = glob(storage_path('app/public/*'));\n\n        /* Le indicamos en que carpeta queremos que se genere el zip y los comprimimos*/\n        Zipper::make(storage_path('app/public/ejemplo.zip'))-&gt;add($files)-&gt;close();\n\n        /* Por \u00faltimo, si queremos descarlos, indicaremos la ruta del archiv, su nombre\n        y lo descargaremos*/\n        return response()-&gt;download(storage_path('app/public/ejemplo.zip'));\n    }\n\n\n}\n</code></pre> <p> RUTA  <code>Route::get('/comprimir', 'Controller@comprimirDescargar')-&gt;name('comprimir');</code></p> <p> VISTA </p> <p><code>&lt;a href=\"{{route('comprimir')}}\"&gt;Comprimir y descargar&lt;/a&gt;</code></p> <p> FAKER SEEDER  </p> <p>https://www.tutsplanet.com/how-to-use-faker-with-laravel/</p>"}]}